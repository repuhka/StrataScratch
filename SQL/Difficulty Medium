-- Output share of US users that are active. Active users are the ones with an "open" status in the table.
-- Meta

select count(case when status = 'open' then 1 else NULL end) /count(user_id) as share_active_users
from fb_active_users
where country='USA';

-- You are given a dataset that provides the number of active users per day per premium account. A premium account will have an entry for every day that it’s premium. However, a premium account may be temporarily discounted and considered not paid, this is indicated by a value of 0 in the final_price column for a certain day. Find out how many premium accounts that are paid on any given day are still premium and paid 7 days later.
--Output the date, the number of premium and paid accounts on that day, and the number of how many of these accounts are still premium and paid 7 days later. Since you are only given data for a 14 days period, only include the first 7 available dates in your output.
-- Meta, Asana

select a.entry_date, count(a.account_id) premium_paid_accounts,count(b.account_id) premium_paid_accounts_7d
from premium_accounts_by_day a left join premium_accounts_by_day b on
a.account_id=b.account_id and (b.entry_date - a.entry_date)=7 
where a.final_price>0 and b.final_price >0
group by a.entry_date
order by a.entry_date
limit 7;

-- The election is conducted in a city and everyone can vote for one or more candidates, or choose not to vote at all. Each person has 1 vote so if they vote for multiple candidates, their vote gets equally split across these candidates. For example, if a person votes for 2 candidates, these candidates receive an equivalent of 0.5 vote each.
-- Find out who got the most votes and won the election. Output the name of the candidate or multiple names in case of a tie. To avoid issues with a floating-point error you can round the number of votes received by a candidate to 3 decimal places.
-- Google, Deloitte

select candidate
from (SELECT candidate,
       round(sum(vote_value), 3) n_votes,
       dense_rank() over(ORDER BY round(sum(vote_value), 3) DESC) place
FROM
  (SELECT voter,
          candidate,
          1.0 / count(*) over(PARTITION BY voter) vote_value
   FROM voting_results
   WHERE candidate IS NOT NULL) a
GROUP BY candidate) results
where place=1

-- For each video, find how many unique users flagged it. A unique user can be identified using the combination of their first name and last name. Do not consider rows in which there is no flag ID.
-- Google, Netflix

select video_id, count(distinct concat(user_firstname,null,user_lastname))
from user_flags
where flag_id is not null
group by video_id;

-- Which user flagged the most distinct videos that ended up approved by YouTube? Output, in one column, their full name or names in case of a tie. In the user's full name, include a space between the first and the last name.
-- Google

select user_id
from (
select concat(user_firstname,' ',user_lastname) as user_id,
dense_rank() over(ORDER BY count(distinct video_id) DESC) place, count(distinct video_id) num_videos
from
(
select * 
from user_flags u
join flag_review fl on u.flag_id=fl.flag_id
where fl.reviewed_outcome='APPROVED') apr
group by user_id
order by place asc) f
where place=1;

-- Output ids of students with a median score from the writing SAT.
-- Google, Kaplan

select student_id
from sat_scores
where sat_writing = (select percentile_cont(0.5) within group(order by sat_writing) median_sat_writing
from sat_scores);



-- What were the top 10 ranked songs in 2010?
-- Output the rank, group name, and song name but do not show the same song twice.
-- Sort the result based on the year_rank in ascending order.
-- Spotify

select distinct year_rank, group_name, song_name
from billboard_top_100_year_end where year=2010 and year_rank < 11
order by year_rank asc;

-- Classify each business as either a restaurant, cafe, school, or other.
-- •	A restaurant should have the word 'restaurant' in the business name.
--•	A cafe should have either 'cafe', 'café', or 'coffee' in the business name.
--•	A school should have the word 'school' in the business name.
--•	All other businesses should be classified as 'other'.
--Output the business name and their classification.
-- City of San Francisco

select business_name, 
(case 
    when business_name like '%Restaurant%' then 'Restaurant'
    when business_name in ('%Cafe%','%Café%','%Coffee%') then 'Cafe'
    when business_name like '%School%' then 'School'
    else 'Other'
    END
    ) business_classification
from sf_restaurant_health_violations;

-- You're given a dataset of health inspections. Count the number of violation in an inspection in 'Roxanne Cafe' for each year. If an inspection resulted in a violation, there will be a value in the 'violation_id' column. Output the number of violations by year in ascending order.
-- City of San Francisco

select extract(YEAR from inspection_date) as violation_year, count(violation_id) as number_violations
from sf_restaurant_health_violations
where business_name like '%Roxanne%' and violation_id is not null
group by extract(YEAR from inspection_date)
order by count(violation_id) asc;

-- Find the rate of processed tickets for each type.
-- Meta

select type, sum(case when processed='TRUE' then 1 else null end)::NUMERIC/count(complaint_id) as processed_complaints 
from facebook_complaints
group by type;

-- Calculate the total revenue from each customer in March 2019. Include only customers who were active in March 2019.
-- Output the revenue along with the customer id and sort the results based on the revenue in descending order.
-- Meta, Amazon

select cust_id, sum(total_order_cost) as revenue
from orders
where EXTRACT(year from order_date)=2019 and extract(month from order_date)=03
group by cust_id
order by sum(total_order_cost) desc;

-- Find the number of times each word appears in drafts.
--Output the word along with the corresponding number of occurrences.
-- Google

SELECT
    word, nentry
FROM
    ts_stat('SELECT to_tsvector(contents) FROM google_file_store WHERE filename ILIKE ''draft%''')


-- Make a report showing the number of survivors and non-survivors by passenger class.
--Classes are categorized based on the pclass value as:
--pclass = 1: first_class
--pclass = 2: second_classs
--pclass = 3: third_class
-- Output the number of survivors and non-survivors by each class.
-- Google, Tesla

SELECT
    survived,
    sum(CASE WHEN pclass = 1 THEN 1 ELSE 0 END) AS first_class,
    sum(CASE WHEN pclass = 2 THEN 1 ELSE 0 END) AS second_class,
    sum(CASE WHEN pclass = 3 THEN 1 ELSE 0 END) AS third_class
FROM titanic
GROUP BY 
    survived;

-- Find the second highest salary of employees.
-- Dropbox, Amazon

select salary 
from (
select id, salary,
dense_rank() over(ORDER BY salary desc) place
from employee) e
where place = 2;

-- Find employees who are earning more than their managers. Output the employee's first name along with the corresponding salary.
-- Walmart, Drop Box, Best Buy

select e.first_name, e.salary
from employee e
left join employee m on e.manager_id=m.id
where e.salary>m.salary;

-- Find the employee with the highest salary per department.
-- Output the department name, employee's first name along with the corresponding salary.
-- Asana

SELECT department AS department, 
    first_name AS employee_name, salary 
    FROM employee 
    WHERE (department , salary) IN (SELECT department, MAX(salary) FROM employee GROUP BY department );

 -- Find the highest target achieved by the employee or employees who works under the manager id 13. Output the first name of the employee and target achieved. The solution should show the highest target achieved under manager_id=13 and which employee(s) achieved it.
 -- Salesforce

 select first_name, target
from salesforce_employees
where manager_id = 13 and target = (select max(target) from salesforce_employees where manager_id=13);


-- Find the customer with the highest daily total order cost between 2019-02-01 to 2019-05-01. If customer had more than one order on a certain day, sum the order costs on daily basis. Output customer's first name, total cost of their items, and the date.
-- For simplicity, you can assume that every first name in the dataset is unique.
-- Shopify, Amazon

WITH cte AS
  (SELECT first_name,
          cust_id,
          sum(total_order_cost) AS total_order_cost,
          order_date
   FROM orders o
   LEFT JOIN customers c ON o.cust_id = c.id
   WHERE order_date BETWEEN '2019-02-1' AND '2019-05-1'
   GROUP BY first_name,
            cust_id,
            order_date)
select first_name, total_order_cost, order_date
from cte
where total_order_cost = (select max(total_order_cost) from cte)


--Find the Olympics with the highest number of athletes. The Olympics game is a combination of the year and the season, and is found in the 'games' column. Output the Olympics along with the corresponding number of athletes.
-- ESPN

 select games, count(distinct id) as num_athletes
from olympics_athletes_events
group by games
order by count(distinct id) desc
limit 1;

-- Find songs that have ranked in the top position. Output the track name and the number of times it ranked at the top. Sort your records by the number of times the song was in the top position in descending order.
-- Spotify

select trackname, count(distinct id) as top_ranked_num
from spotify_worldwide_daily_song_ranking
where position = 1
group by trackname
order by count(distinct id) desc;


-- Find all wineries which produce wines by possessing aromas of plum, cherry, rose, or hazelnut. To make it more simple, look only for singular form of the mentioned aromas. HINT: if one of the specified words is just a substring of another word, this should not be a hit, but a miss.
-- Example Description: Hot, tannic and simple, with cherry jam and currant flavors accompanied by high, tart acidity and chile-pepper alcohol heat.
-- Therefore the winery Bella Piazza is expected in the results.
-- Wine Magazine

SELECT DISTINCT winery
FROM winemag_p1
WHERE lower(description) ~ '\y(plum|cherry|rose|hazelnut)\y'
order by winery asc;


--Find the top 5 businesses with most reviews. Assume that each row has a unique business_id such that the total reviews for each business is listed on each row. Output the business name along with the total number of reviews and order your results by the total reviews in descending order.
-- Yelp

select name, sum(review_count) review_count
from yelp_business
group by name
order by sum(review_count) desc
Limit 5;

-- Find the top business categories based on the total number of reviews. Output the category along with the total number of reviews. Order by total reviews in descending order.
-- Yelp

WITH cats AS
  (SELECT unnest(string_to_array(categories, ';')) AS category,
          review_count
   FROM yelp_business)
SELECT category,
       sum(review_count) as review_cnt
FROM cats
GROUP BY category
ORDER BY review_cnt DESC


-- Find the review_text that received the highest number of  'cool' votes.
-- Output the business name along with the review text with the highest numbef of 'cool' votes.

SELECT business_name, review_text
FROM yelp_reviews
WHERE cool = (SELECT max(cool) FROM yelp_reviews);

-- Find the date with the highest total energy consumption from the Meta/Facebook data centers. Output the date along with the total energy consumption across all data centers.
-- Meta

WITH total_energy AS
  (SELECT *
   FROM fb_eu_energy eu
   UNION ALL 
   SELECT *
   FROM fb_asia_energy asia
   UNION ALL
   SELECT *
   FROM fb_na_energy na),
     energy_by_date AS
  (SELECT date, sum(consumption) AS total_energy
   FROM total_energy
   GROUP BY date
   ORDER BY date ASC),
     max_energy AS
  (SELECT max(total_energy) AS max_energy
   FROM energy_by_date)
SELECT ebd.date,
       ebd.total_energy
FROM energy_by_date ebd
JOIN max_energy me ON ebd.total_energy = me.max_energy


-- Find the average total compensation based on employee titles and gender. Total compensation is calculated by adding both the salary and bonus of each employee. However, not every employee receives a bonus so disregard employees without bonuses in your calculation. Employee can receive more than one bonus.
-- Output the employee title, gender (i.e., sex), along with the average total compensation.
-- City of San Francisco

SELECT e.employee_title, e.sex,AVG(e.salary + b.ttl_bonus) AS avg_compensation
FROM sf_employee e
INNER JOIN 
  (SELECT worker_ref_id, SUM(bonus) AS ttl_bonus
   FROM sf_bonus
   GROUP BY worker_ref_id) b 
   ON e.id = b.worker_ref_id
GROUP BY employee_title, sex


-- Find matching hosts and guests pairs in a way that they are both of the same gender and nationality.
-- Output the host id and the guest id of matched pair.
-- Airbnb


select distinct h.host_id, g.guest_id 
from airbnb_hosts h 
inner join airbnb_guests g on h.nationality = g.nationality and h.gender=g.gender;

-- Find the 3 most profitable companies in the entire world.
-- Output the result along with the corresponding company name.
-- Sort the result based on profits in descending order.
-- Forbes

select company, sum(profits) as total_profit 
from forbes_global_2010_2014
group by company
order by sum(profits) desc
limit 3;


-- Calculate the percentage of spam posts in all viewed posts by day. A post is considered a spam if a string "spam" is inside keywords of the post. Note that the facebook_posts table stores all posts posted by users. The facebook_post_views table is an action table denoting if a user has viewed a post.
-- Spam posts

SELECT spam_summary.post_date, (n_spam/n_posts::float)*100 AS spam_share
FROM
  (SELECT post_date, 
          sum(CASE
                  WHEN v.viewer_id IS NOT NULL THEN 1
                  ELSE 0
              END) AS n_posts
   FROM facebook_posts p
   JOIN facebook_post_views v ON p.post_id = v.post_id
   GROUP BY post_date) posts_summary
LEFT JOIN
  (SELECT post_date,
          sum(CASE
                  WHEN v.viewer_id IS NOT NULL THEN 1
                  ELSE 0
              END) AS n_spam
   FROM facebook_posts p
   JOIN facebook_post_views v ON p.post_id = v.post_id
   WHERE post_keywords ilike '%spam%'
   GROUP BY post_date) spam_summary ON spam_summary.post_date = posts_summary.post_date;


  -- Find the number of Apple product users and the number of total users with a device and group the counts by language. Assume Apple products are only MacBook-Pro, iPhone 5s, and iPad-air. Output the language along with the total number of Apple users and users with any device. Order your results based on the number of total users in descending order.
  -- Apple, Google

  SELECT u.language,
       COUNT(DISTINCT CASE
                           WHEN device IN ('macbook pro',
                                           'iphone 5s',
                                           'ipad air') THEN u.user_id
                           ELSE NULL
                       END) AS apple_users,
             COUNT(DISTINCT u.user_id) AS total_users
FROM playbook_users u
INNER JOIN playbook_events e ON u.user_id = e.user_id
GROUP BY u.language
ORDER BY total_users DESC


--Find the number of apartments per nationality that are owned by people under 30 years old.
-- Output the nationality along with the number of apartments.
-- Sort records by the apartments count in descending order.
-- Airbnb

select nationality, count(distinct unit_id) as unit_count
FROM airbnb_units u 
INNER JOIN airbnb_hosts h 
  ON u.host_id = h.host_id 
where u.unit_type='Apartment' and h.age < 30
group by h.nationality
order by count(distinct unit_id) desc;


-- --Rank guests based on the total number of messages they've exchanged with any of the hosts. Guests with the same number of messages as other guests should have the same rank. Do not skip rankings if the preceding rankings are identical.
-- Output the rank, guest id, and number of total messages they've sent. Order by the highest number of total messages first.
-- Airbnb

select id_guest, sum(n_messages) as total_messages,
dense_rank() over(order by sum(n_messages) desc) as rank_user
from airbnb_contacts
group by id_guest
order by sum(n_messages) desc;

-- You have been asked to find the job titles of the highest-paid employees.
-- Your output should include the highest-paid title or multiple titles with the same salary.
-- Amazon, Doordash

select worker_title
from (
select t.worker_title, max(w.salary) as salary,
dense_rank() over(order by max(w.salary) DESC) as rank_salary
from worker w join title t on w.worker_id=t.worker_ref_id
group by t.worker_title
order by max(w.salary) desc) a
where rank_salary=1;


-- Calculate each user's average session time. A session is defined as the time difference between a page_load and page_exit. For simplicity, assume a user has only 1 session per day and if there are multiple of the same events on that day, consider only the latest page_load and earliest page_exit, with an obvious restriction that load time event should happen before exit time event . Output the user_id and their average session time.
-- Meta

WITH ordered_actions AS (
    SELECT user_id, timestamp, action, 
    ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY timestamp) as seq_num
    FROM facebook_web_log
    WHERE action IN ('page_load', 'page_exit')
),
matched_sessions AS (
    SELECT
        a.user_id,
        a.timestamp AS load_time,
        b.timestamp AS exit_time,
        b.timestamp - a.timestamp AS session_duration
    FROM ordered_actions a
    JOIN ordered_actions b ON a.user_id = b.user_id AND 
    a.seq_num = b.seq_num - 1
    WHERE a.action = 'page_load' AND b.action = 'page_exit'
)
SELECT user_id, AVG(session_duration) AS avg_session_duration
FROM matched_sessions
GROUP BY user_id;


-- Write a query that'll identify returning active users. A returning active user is a user that has made a second purchase within 7 days of any other of their purchases. Output a list of user_ids of these returning active users.
-- Amazon

select distinct(a.user_id)
from amazon_transactions a join amazon_transactions b on
a.user_id=b.user_id and b.created_at::date-a.created_at::date between 0 and 7 and a.id<>b.id
order by a.user_id;


-- You are given a table of product launches by company by year. Write a query to count the net difference between the number of products companies launched in 2020 with the number of products companies launched in the previous year. Output the name of the companies and a net difference of net products released for 2020 compared to the previous year.
-- Tesla, Salesforce

select a.company_name, (count(distinct a.brand_2020)-count(distinct b.brand_2019)) as net_product
from
(select company_name, product_name as brand_2020 from car_launches where year=2020) a full outer join
(select company_name, product_name as brand_2019 from car_launches where year=2019) b 
on a.company_name=b.company_name
group by a.company_name;


-- Find the email activity rank for each user. Email activity rank is defined by the total number of emails sent. The user with the highest number of emails sent will have a rank of 1, and so on. Output the user, total emails, and their activity rank. Order records by the total emails in descending order. Sort users with the same number of emails in alphabetical order.
-- In your rankings, return a unique value (i.e., a unique rank) even if multiple users have the same number of emails. For tie breaker use alphabetical order of the user usernames.
-- Google

SELECT from_user, 
count(*) as total_emails, 
row_number() OVER ( order by count(*) desc, from_user asc)
FROM google_gmail_emails 
GROUP BY from_user
ORDER BY 2 DESC, 1

-- What is the overall friend acceptance rate by date? Your output should have the rate of acceptances by the date the request was sent. Order by the earliest date to latest.
-- Assume that each friend request starts by a user sending (i.e., user_id_sender) a friend request to another user (i.e., user_id_receiver) that's logged in the table with action = 'sent'. If the request is accepted, the table logs action = 'accepted'. If the request is not accepted, no record of action = 'accepted' is logged.
-- Meta

WITH sent_cte AS
  (SELECT date, user_id_sender,
                user_id_receiver
   FROM fb_friend_requests
   WHERE action='sent' ),
     accepted_cte AS
  (SELECT date, user_id_sender,
                user_id_receiver
   FROM fb_friend_requests
   WHERE action='accepted' )
   SELECT a.date,
       count(b.user_id_receiver)/CAST(count(a.user_id_sender) AS decimal) AS percentage_acceptance
FROM sent_cte a
LEFT JOIN accepted_cte b ON a.user_id_sender=b.user_id_sender
AND a.user_id_receiver=b.user_id_receiver
GROUP BY a.date
ORDER BY a.date;


-- Identify projects that are at risk for going overbudget. A project is considered to be overbudget if the cost of all employees assigned to the project is greater than the budget of the project.
-- You'll need to prorate the cost of the employees to the duration of the project. For example, if the budget for a project that takes half a year to complete is $10K, then the total half-year salary of all employees assigned to the project should not exceed $10K. Salary is defined on a yearly basis, so be careful how to calculate salaries for the projects that last less or more than one year.
-- Output a list of projects that are overbudget with their project name, project budget, and prorated total employee expense (rounded to the next dollar amount).
-- HINT: to make it simpler, consider that all years have 365 days. You don't need to think about the leap years.
-- Linkedin

SELECT title, budget, ceiling(prorated_expenses) AS prorated_employee_expense 
FROM (
SELECT title, budget, (end_date::date - start_date::date) * (sum(salary)/365) AS prorated_expenses
FROM linkedin_projects a 
INNER JOIN linkedin_emp_projects b ON a.id = b.project_id 
INNER JOIN linkedin_employees c ON b.emp_id=c.id 
GROUP BY title, budget, end_date, start_date) a
where prorated_expenses > budget
order by title asc;
